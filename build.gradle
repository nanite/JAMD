plugins {
    id("dev.nanite.mlp") version("0.0.3")
    id("java")
    id "me.modmuss50.mod-publish-plugin" version "0.3.0"

    id("fabric-loom") version("1.4.2") apply(false)
    id 'net.neoforged.gradle' version '[6.0.18,6.2)' apply(false)
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

multiLoader.root() {
    minecraftVersion.set(project.property("minecraft_version"))
    modID.set(project.property("mod_id"))
    splitSources.set(true)
    accessWidenerFile.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))

    dataGen {
        useFabric.set(project(":common").file("src/generated/resources"))
        useForge.set(project(":forge").file("src/generated/resources"))
    }

}

allprojects {
    def isSnapshot = providers.environmentVariable('SNAPSHOT').is("true")
    version = "${mod_version}+mc${minecraft_version}${isSnapshot ? '-SNAPSHOT' : ''}"
    setArchivesBaseName("${mod_name}-${project.name}".toLowerCase())
    group = project.property("maven_group")
}

subprojects {
    apply plugin: 'dev.nanite.mlp'
    apply plugin: 'maven-publish'

    afterEvaluate {
        project.sourceSets.main.resources.srcDir(project.file('src/generated/resources'))
    }

    base {
        archivesName = "${mod_name}-${project.name}".toLowerCase()
    }

    tasks.withType(ProcessResources).configureEach {
        outputs.upToDateWhen { false }
    }

    repositories {
        mavenLocal()
        maven {
            name = "Creeperhost"
            url = uri("https://maven.creeperhost.net/")
        }
        maven {
            name = "nanite"
            url = uri("https://maven.nanite.dev/snapshots")
        }
        maven {
            name = "UnRealDinnerbone"
            url = "https://maven.unreal.codes/releases"
        }
    }

    publishing {
        repositories {
            if (providers.environmentVariable("NANITE_TOKEN").isPresent()) {
                maven {
                    def isSnapshot = providers.environmentVariable('SNAPSHOT').is("true")
                    url "https://maven.nanite.dev/${isSnapshot ? 'snapshots' : 'releases'}"
                    credentials {
                        username = "nanite"
                        password = providers.environmentVariable("NANITE_TOKEN").get()
                    }
                }
            }
        }
        publications {
            mavenJava(MavenPublication) {
                groupId project.group
                artifactId project.getArchivesBaseName()
            }
        }
    }

}


publishMods {
    dryRun = providers.environmentVariable("CURSE_TOKEN").getOrNull() == null
    changelog = file("./CHANGELOG.md").text
    version = "${mod_version}"
    type = STABLE

    def fabricOptions = publishOptions {
        file = project.provider { project(":fabric").tasks.remapJar }.flatMap { it.archiveFile }
        displayName = "${project.name} Fabric ${mod_version}+mc${minecraft_version}"
        modLoaders.add("fabric")
    }

    def forgeOptions = publishOptions {
        file = project.provider { project(":forge").tasks.jar }.flatMap { it.archiveFile }
        displayName = "${project.name} Forge ${mod_version}+mc${minecraft_version}"
        modLoaders.add("forge")
    }

    def curseForgeOptions = curseforgeOptions {
        accessToken = providers.environmentVariable("CURSE_TOKEN")
        projectId = project.property("curse_id")
        minecraftVersions.add("${minecraft_version}")
        requires {
            slug = "trenzalore"
        }
    }

    curseforge("curseforgeFabric") {
        from(curseForgeOptions, fabricOptions)
        requires {
            slug = "fabric-api"
        }
    }

    curseforge("curseforgeForge") {
        from(curseForgeOptions, forgeOptions)
    }

}

